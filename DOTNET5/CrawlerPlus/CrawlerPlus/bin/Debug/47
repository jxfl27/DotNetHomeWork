<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>惊却一目 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=caAedYKpnz341INFIWakIM6r1EP9FIuJg43i9i8zqDQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=F9ODK0b_BexrGFuzwObB8A2Gx3VnPgTALBeh3BNdKdg" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=_A34W8fnMJT0tcRq18x5CRz6GYA4gZvedLXGAkdf2Ms" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jingqueyimu/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jingqueyimu/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jingqueyimu/wlwmanifest.xml" />
    <script>
        var currentBlogId = 565815;
        var currentBlogApp = 'jingqueyimu';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'coffee';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=kKx3DBtpvO8r97BzPmHJseQ10fGHkI-ZwMh4FA0eEd0"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a> 
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/jingqueyimu/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jingqueyimu/">惊却一目</a>
</h1>
<h2>
个人博客：www.jingqueyimu.com
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jingqueyimu/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%83%8A%E5%8D%B4%E4%B8%80%E7%9B%AE">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/jingqueyimu/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/jingqueyimu/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
26&nbsp;
文章- 
0&nbsp;
评论- 
0&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/10/25.html">2020年10月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13875760.html">
    <span>
        《Head First 设计模式》：剩下的模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、桥接模式 1、定义 桥接模式通过将实现和抽象分离开来，放在两个不同的类层次中，从而使得它们可以独立改变。 要点： 当一个类存在两个独立变化的维度，而且都需要进行扩展时，可以将其中一个维度抽象化，另一个维度实现化。 抽象化就是通过抽象类来实现多态，实现化则是通过接口来实现多态。 桥接模式通过        <a href="https://www.cnblogs.com/jingqueyimu/p/13875760.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-25 22:43
惊却一目
<span class="post-view-count">阅读(39)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13875760" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/09/28.html">2020年9月28日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13747535.html">
    <span>
        《Head First 设计模式》：代理模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 代理模式为另一个对象提供一个替身或占位符以控制对这个对象的访问。 要点： 代理模式为一个对象创建了代理对象，让代理对象控制对该对象的访问。被代理的对象可以是远程的对象、创建开销大的对象或者需要安全控制的对象。 代理类型：远程代理、虚拟代理、保护代理等。 远程代理：控制访问远程对象。         <a href="https://www.cnblogs.com/jingqueyimu/p/13747535.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-09-28 23:38
惊却一目
<span class="post-view-count">阅读(27)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13747535" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/09/21.html">2020年9月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13709241.html">
    <span>
        《Head First 设计模式》：状态模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 状态模式允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。 要点： 状态模式允许一个对象基于内部状态而拥有不同的行为。 状态模式将状态封装成为独立的类，并将动作委托到代表当前状态的对象。 通过将每个状态封装进一个类，我们把以后需要做的任何改变局部化了。 二、实现步骤         <a href="https://www.cnblogs.com/jingqueyimu/p/13709241.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-09-21 22:44
惊却一目
<span class="post-view-count">阅读(237)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(1)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13709241" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/09/13.html">2020年9月13日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13663149.html">
    <span>
        《Head First 设计模式》：组合模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 组合模式允许你将对象合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理组合对象以及个体对象。 组合对象：包含其他组件的组件。 个体对象（叶节点对象）：没有包含其他组件的组件。 要点： 组合结构内的任意对象称为组件，组件可以是组合，也可以是叶节点。 通过将组合对象和        <a href="https://www.cnblogs.com/jingqueyimu/p/13663149.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-09-13 20:49
惊却一目
<span class="post-view-count">阅读(134)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13663149" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/09/07.html">2020年9月7日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13629551.html">
    <span>
        《Head First 设计模式》：迭代器模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。 要点： 迭代器模式把在元素之间游走的责任交给迭代器，而不是聚合对象。这样简化了聚合的接口和实现，也让责任各得其所。 二、实现步骤 1、创建迭代器接口 /** * 迭代器接口 */ public inte        <a href="https://www.cnblogs.com/jingqueyimu/p/13629551.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-09-07 22:07
惊却一目
<span class="post-view-count">阅读(39)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13629551" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/08/30.html">2020年8月30日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13586886.html">
    <span>
        《Head First 设计模式》：模板方法模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。 要点： 模板方法定义了一个算法的步骤，每个步骤都被一个方法所代表，而这几个方法的具体实现可由子类提供。 模板方法可确保算法的结构保持不变，同        <a href="https://www.cnblogs.com/jingqueyimu/p/13586886.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-30 21:52
惊却一目
<span class="post-view-count">阅读(45)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13586886" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/08/24.html">2020年8月24日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13556650.html">
    <span>
        《Head First 设计模式》：外观模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 外观模式提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。 要点： 外观模式将一个或数个类的复杂的一切都隐藏在背后，只显露出一个干净美好的外观。 通过将子系统的方法封装到外观的方法中，可以达到对子系统的“一键操作”。 外观模式的意图是简化接        <a href="https://www.cnblogs.com/jingqueyimu/p/13556650.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-24 22:02
惊却一目
<span class="post-view-count">阅读(165)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13556650" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/08/18.html">2020年8月18日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13526144.html">
    <span>
        《Head First 设计模式》：适配器模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 适配器模式将一个类的接口（被适配者），转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。 要点： 适配器实现了目标接口，并持有被适配者的实例。 适配器使用被适配者的方法，把请求转换成被适配者的一个或多个方法。 客户通过目标接口调用适配器的方法对适配器发出请求。 客户        <a href="https://www.cnblogs.com/jingqueyimu/p/13526144.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-18 21:26
惊却一目
<span class="post-view-count">阅读(28)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13526144" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/08/10.html">2020年8月10日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13472506.html">
    <span>
        《Head First 设计模式》：命令模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 命令模式将“请求”封装成对象（命令对象），以便使用不同的“请求”来参数化其他对象。 要点： 命令模式可将“动作的请求者”从“动作的执行者”对象中解耦。 被解耦的两者之间通过命令对象进行沟通。命令对象封装了接收者和一个或多个动作。 命令对象提供一个 execute() 方法，该方法封装        <a href="https://www.cnblogs.com/jingqueyimu/p/13472506.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-10 22:10
惊却一目
<span class="post-view-count">阅读(40)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13472506" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/jingqueyimu/archive/2020/08/01.html">2020年8月1日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingqueyimu/p/13416809.html">
    <span>
        《Head First 设计模式》：单件模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：正文 一、定义 单件模式确保一个类只有一个实例，并提供一个全局访问点。 要点： 定义持有唯一单件实例的类变量。 私有化构造，避免其他类产生实例。 对外提供获取单件实例的静态方法。 二、实现步骤 1、创建单件类 （1）方式一：懒汉式 延迟创建单件实例。 线程不安全： /** * 单件类（懒汉式、线程不        <a href="https://www.cnblogs.com/jingqueyimu/p/13416809.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-08-01 22:03
惊却一目
<span class="post-view-count">阅读(127)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13416809" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/jingqueyimu/default.html?page=2">
        下一页
    </a>

    </div>    
</div>







	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 惊却一目
<br /><span id="poweredby">Powered by .NET 5.0.0-rc.2.20475.5 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
