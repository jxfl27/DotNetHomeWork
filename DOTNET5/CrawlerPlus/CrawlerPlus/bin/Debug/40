<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta name="description" content="c&#x2B;&#x2B;链表实现的阻塞队列 最近从java源码里发现了阻塞队列的实现，觉得非常有趣。 首先，介绍下什么是阻塞队列。阻塞队列代表着一个队列可以线程安全的往该队列中写数据和从该队列中读数据。也就是说，我们可" />
    <meta property="og:description" content="c&#x2B;&#x2B;链表实现的阻塞队列 最近从java源码里发现了阻塞队列的实现，觉得非常有趣。 首先，介绍下什么是阻塞队列。阻塞队列代表着一个队列可以线程安全的往该队列中写数据和从该队列中读数据。也就是说，我们可" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>LinkBlockedQueue的c++实现 - 封fenghl - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=caAedYKpnz341INFIWakIM6r1EP9FIuJg43i9i8zqDQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/banlieue13/bundle-banlieue13.min.css?v=nSJWRKbAtNEwAUjJ1kf7YVma2JYO-y1vz2ddpihk6Ds" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/banlieue13/bundle-banlieue13-mobile.min.css?v=mHwE28VnH-RYS-H9Cz4AVVFs184B7YJI9CUNsGgrBrY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/fenghualong/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/fenghualong/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/fenghualong/wlwmanifest.xml" />
    <script>
        var currentBlogId = 454693;
        var currentBlogApp = 'fenghualong';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'Banlieue13';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2020-10-25 11:31';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=kKx3DBtpvO8r97BzPmHJseQ10fGHkI-ZwMh4FA0eEd0"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="has-navbar">
    <a name="top"></a> 
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/fenghualong/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/fenghualong/">封fenghl</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/fenghualong/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%B0%81fenghl">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/fenghualong/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/fenghualong/rss/">
    <img src="/skins/banlieue13/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
12&nbsp;
文章- 
0&nbsp;
评论- 
6&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/13875971.html">
    <span>LinkBlockedQueue的c++实现</span>
    


</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="c链表实现的阻塞队列">c++链表实现的阻塞队列</h1>
<p>最近从java源码里发现了阻塞队列的实现，觉得非常有趣。</p>
<p>首先，介绍下什么是阻塞队列。阻塞队列代表着一个队列可以线程安全的往该队列中写数据和从该队列中读数据。也就是说，我们可以在多个线程之间并发的进行写数据和读数据，而不会引发任何并发问题。</p>
<p>下面我们就说说如何实现一个阻塞队列。</p>
<p>而实现一个阻塞队列的前提：</p>
<ol>
<li>需要能够使用链表实现一个队列</li>
<li>能够使用c++的锁机制，去给队列的写和读操作加锁。</li>
</ol>
<p>为了性能，这里的读和写的锁不能是同一把锁。而对于一个链表队列来说，读取操作肯定需要涉及头指针，写操作肯定涉及尾指针。既然要实现读操作一把锁和写操作一把锁。那么就要求读操作只能更改头指针而不能更改尾指针，写操作只能更改尾指针而不能更改头指针。不满足这个要求，那么读写操作就不可能实现用两把锁分别对读写进行加锁。</p>
<h2 id="基本队列的实现">基本队列的实现</h2>
<p>现在我们先说说如何实现这个队列。</p>
<p>要求：入队操作(enqueue)只能操作尾指针(last), 出队操作(dequeue)只能操作头指针(head)。</p>
<p>对于队列的初始化，这里不能单纯的设置为空指针，需要将头尾指针同一节点。</p>
<p><img src="https://img2020.cnblogs.com/blog/1474232/202010/1474232-20201025232718958-1448840746.png" alt="" loading="lazy"></p>
<p>下面我们来看入队操作如何实现<br>
<img src="https://img2020.cnblogs.com/blog/1474232/202010/1474232-20201025232739881-373436779.png" alt="" loading="lazy"></p>
<p>从这个入队操作来看，该操作只更改了尾指针last, 而没有更改头指针head。</p>
<p>其代码实现为：</p>
<pre><code class="language-c++">    void enqueue(int item) {
        Node *node = new Node(item);
        last = last-&gt;next = node;
    }
</code></pre>
<p>接下来我们来看出队操作如何实现</p>
<p><img src="https://img2020.cnblogs.com/blog/1474232/202010/1474232-20201025232802655-926309400.png" alt="" loading="lazy"></p>
<p>从出队操作来看就有趣的多，它抛弃了head所指向的节点，而这个节点有可能是那些节点呢？</p>
<ol>
<li>初始化时所赋值的那个节点</li>
<li>出队后的节点</li>
</ol>
<p>也就是说，head所指向的节点中的val值没有任何实际含义。当需要出队时，出队head指向的下一个节点first中val的值，然后抛弃head本身指向的值，让head指向head的下一个节点first，此时head原来所指向的节点将被删除。现在我们可以看出出队操作也只改变了头指针head的值。</p>
<p>其代码实现为：</p>
<pre><code class="language-c++">    int dequeue() {
        Node *h = head;
        Node *first = head-&gt;next;
        delete h;
        head = first;
        int x = first-&gt;item;
        return x;
    }
</code></pre>
<p>现在队列已经实现，下面就看看阻塞队列如何实现。</p>
<h2 id="阻塞队列的实现">阻塞队列的实现</h2>
<p>既然是阻塞队列，那就意味这加锁和等待。那就需要对c++的一些锁知识和条件变量有了解。</p>
<p>先来看看我们需要实现阻塞队列的那些方法：</p>
<table>
<thead>
<tr>
<th style="text-align: center"></th>
<th style="text-align: center">Special Value</th>
<th style="text-align: center">Blocks</th>
<th style="text-align: center">Times out</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center">Insert</td>
<td style="text-align: center">offer(o)</td>
<td style="text-align: center">put(o)</td>
<td style="text-align: center">offer(o,timeout)</td>
</tr>
<tr>
<td style="text-align: center">Remove</td>
<td style="text-align: center">poll()</td>
<td style="text-align: center">take()</td>
<td style="text-align: center">poll(timeout)</td>
</tr>
</tbody>
</table>
<h3 id="入队">入队</h3>
<p>让我们先来实现put这个方法。</p>
<p>先看其实现流程图：</p>
<p><img src="https://img2020.cnblogs.com/blog/1474232/202010/1474232-20201025232826564-1394086981.png" alt="" loading="lazy"></p>
<p>由于该队列实现有最大值限制，故在插入数据之前需要先判断该队列是否已满，已满则需等待该队列有可用空间。在该线程入队操作完成后，可能有别的线程也在等待入队，需要唤醒其他写数据的线程，使其继续执行后续操作。如果入队前队列为空，可能有出队操作正在阻塞等待读数，也需要去唤醒读数据的线程。</p>
<p>在看代码实现之前，我们需要定义一些变量用于代码实现环节：</p>
<pre><code class="language-c++">    /* The capacity bound*/
    int64_t capacity;
    /*Current number of elements */
    std::atomic&lt;int64_t&gt; count;    
	/** Lock held by take, pool, etc */
    std::mutex takeLock;
    /** Wait queue for waiting takes */
    std::condition_variable notEmpty;
    /** Lock held by put, offer, etc */
    std::mutex putLock;
    /** Wait queue for waiting puts */
    std::condition_variable notFull;
</code></pre>
<p>put函数的代码实现：</p>
<pre><code class="language-c++">void LinkedBlockingQueue::put(const int item){
    int c;
    {
        std::unique_lock&lt;std::mutex&gt; lck{putLock};
        if( count == capacity) {
            notFull.wait(lck, [this](){return count &lt; capacity;}); //（1）
        }
        enqueue(item);  //不应该把申请空间放在锁里面，耗时有点大
        c = count.fetch_add(1);
    }
    if(c + 1 &lt; capacity) {
        notFull.notify_one();
    }

    if(0 == c) {
        notEmpty.notify_one();
    }
}
</code></pre>
<p>对于offer(o)的实现，主要更改是对上述代码(1)中的等待改为直接返回false, 表示，当前没有可用空间插入数据。正常插入就返回true.</p>
<p>对于offer(o,timeout)的实现，就需要在上述代码(1)中的wait函数添加上时间参数，使其可以在timeout时间内返回，如果是正常唤醒，正常入队，则返回ture,否则返回false.</p>
<p>该更改为：</p>
<pre><code class="language-c++">            if(!notFull.wait_for(lck, rel_time, [this](){return count &lt; capacity;})){
                return false;
            }
</code></pre>
<h3 id="出队">出队</h3>
<p>对于出队，其实现和入队基本相同，基本上只需要更改其中的关键判断和通知。</p>
<p>take函数的代码实现为：</p>
<pre><code class="language-c++">void LinkedBlockingQueue::take(int &amp; returnVal) {
    int c;
    {
        std::unique_lock&lt;std::mutex&gt; lck{takeLock};
        if( 0 == count) {
            notEmpty.wait(lck, [this](){return count &gt; 0 ;});
        }
        returnVal = dequeue();
        c = count.fetch_sub(1);
    }

    if( c &gt; 1 ) {
        notEmpty.notify_one();
    }

    if(c == capacity) {
        notFull.notify_one();
    }
}
</code></pre>
<p>剩下的实现细节可以参考<a href="https://github.com/fenghualong/LinkedBlockedQueue/blob/main/LinkedBlockingQueue.h">我的实现</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2020-10-25 23:31</span>&nbsp;
<a href="https://www.cnblogs.com/fenghualong/">封fenghl</a>&nbsp;
阅读(<span id="post_view_count">14</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13875971" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(13875971);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 454693, cb_blogApp = 'fenghualong', cb_blogUserGuid = 'e169014b-c247-4357-17dc-08d60b235bdd';
    var cb_entryId = 13875971, cb_entryCreatedDate = '2020-10-25 23:31', cb_postType = 1;
    loadViewCount(cb_entryId);
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
   </script>
</div>

</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 封fenghl
<br /><span id="poweredby">Powered by .NET 5.0.0-rc.2.20475.5 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
