<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    
    
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>封fenghl - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=caAedYKpnz341INFIWakIM6r1EP9FIuJg43i9i8zqDQ" />
    <link id="MainCss" rel="stylesheet" href="/skins/banlieue13/bundle-banlieue13.min.css?v=nSJWRKbAtNEwAUjJ1kf7YVma2JYO-y1vz2ddpihk6Ds" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/banlieue13/bundle-banlieue13-mobile.min.css?v=mHwE28VnH-RYS-H9Cz4AVVFs184B7YJI9CUNsGgrBrY" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/fenghualong/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/fenghualong/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/fenghualong/wlwmanifest.xml" />
    <script>
        var currentBlogId = 454693;
        var currentBlogApp = 'fenghualong';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'Banlieue13';
        var visitorUserId = '';
    </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=kKx3DBtpvO8r97BzPmHJseQ10fGHkI-ZwMh4FA0eEd0"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="has-navbar">
    <a name="top"></a> 
    <div id="top_nav" class="navbar">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a>
                </li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=oS4PkibyMjZ9rGD5XAcLt99uW_s76Javy2up4dbnZNY" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" onclick="logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signin/?returnUrl=https://www.cnblogs.com/">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/fenghualong/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/fenghualong/">封fenghl</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/fenghualong/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%B0%81fenghl">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/fenghualong/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/fenghualong/rss/">
    <img src="/skins/banlieue13/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
12&nbsp;
文章- 
0&nbsp;
评论- 
6&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		





		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2020/10/25.html">2020年10月25日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/13875971.html">
    <span>
        LinkBlockedQueue的c++实现
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：c++链表实现的阻塞队列 最近从java源码里发现了阻塞队列的实现，觉得非常有趣。 首先，介绍下什么是阻塞队列。阻塞队列代表着一个队列可以线程安全的往该队列中写数据和从该队列中读数据。也就是说，我们可以在多个线程之间并发的进行写数据和读数据，而不会引发任何并发问题。 下面我们就说说如何实现一个阻塞队        <a href="https://www.cnblogs.com/fenghualong/p/13875971.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-25 23:31
封fenghl
<span class="post-view-count">阅读(22)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13875971" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2020/10/21.html">2020年10月21日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/13855360.html">
    <span>
        条件变量condition_variable的使用及陷阱
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：条件变量condition_variable的使用及陷阱 最近看代码发现，在多线程中实现有关throttle和阻塞等有关的功能时，条件变量的使用是最常见的。 首先先对条件变量有个基本的认识 条件变量的基础知识 条件变量std::condition_variable定义在头文件&amp;lt;condition_v        <a href="https://www.cnblogs.com/fenghualong/p/13855360.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-10-21 22:42
封fenghl
<span class="post-view-count">阅读(14)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=13855360" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2020/03/14.html">2020年3月14日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/12492885.html">
    <span>
        docker的安装及初次使用
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：docker的安装及初次使用 &quot;Ubuntu 安装 docker &quot; 遇到的问题 问题1 解决方法一： 对于 的镜像仓库来说，国内访问速度较慢，我们添加一个阿里云提供的 镜像加速器。 首先，我们需要编辑 文件： 然后加入如下内容： 修改之后，需要重启 服务，让修改生效。使用如下命令： 解决方法二(         <a href="https://www.cnblogs.com/fenghualong/p/12492885.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-14 16:49
封fenghl
<span class="post-view-count">阅读(210)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12492885" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2020/03/08.html">2020年3月8日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/12439529.html">
    <span>
        一种控制并发的实现方式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：一种控制并发的实现方式 算法来源 这里的代码实现从ceph源码改编过来，这里进行了简化，主要是学习其中所涉及的c++知识点和算法思想 涉及到的知识点 三个关键的函数库： 这个类是对一个值的类型的封装，保证对该值的访问不会引起数据争用，并且可用于在不同线程之间同步内存访问，避免了对该数据的读写还需要手        <a href="https://www.cnblogs.com/fenghualong/p/12439529.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2020-03-08 00:43
封fenghl
<span class="post-view-count">阅读(136)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12439529" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2019/09/22.html">2019年9月22日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/11568398.html">
    <span>
        C++关于锁的总结（一）
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：C++关于锁的总结（一） 线程中的锁分为两种， 互斥锁 和 共享锁 。 相关的头文件有 ，前者具有 操作，用于实现互斥功能，后者具有 操作，用于完成共享锁操作。 这里先讨论 这个类。 共享锁 如果需要使用共享锁，则需要使用到 这个类。具体讲解见 &quot;这里&quot; 该锁可用于保护被多个线程同时访问的共享数据。        <a href="https://www.cnblogs.com/fenghualong/p/11568398.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-09-22 17:41
封fenghl
<span class="post-view-count">阅读(8182)</span><text> </text>
<span class="post-comment-count">评论(6)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11568398" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/11568259.html">
    <span>
        AI机器人最高等级
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：AI机器人最高等级 题目描述 在小朱朱的游戏世界里，有n个AI机器人。 他们相互之间可以进行PK，胜方存活且升一级，负方直接淘汰。 高等级AI必定战胜低等级AI，同等级AI的PK结果必定一胜一负，且规定每级差距至多为1级。 一开始所有的AI机器人都是0级，小朱朱可以指定任意两个AI机器人进行PK。         <a href="https://www.cnblogs.com/fenghualong/p/11568259.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2019-09-22 17:18
封fenghl
<span class="post-view-count">阅读(138)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11568259" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2018/11/16.html">2018年11月16日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/9968773.html">
    <span>
        一个简易git服务器的搭建
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：&quot;查看本机ssh公钥，生成公钥&quot; 查看ssh公钥方法： 1. 打开git bash窗口 2. 进入.ssh目录： cd ~/.ssh 3. 找到id_rsa.pub文件： ls 4. 查看公钥：cat id_rsa.pub 或者 vim id_rsa.pub 何为公钥： 1. 很多服务器都是需要认证        <a href="https://www.cnblogs.com/fenghualong/p/9968773.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2018-11-16 13:21
封fenghl
<span class="post-view-count">阅读(58)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9968773" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2018/09/01.html">2018年9月1日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/9572098.html">
    <span>
        抽象工厂模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：抽象工厂模式 抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都        <a href="https://www.cnblogs.com/fenghualong/p/9572098.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2018-09-01 23:23
封fenghl
<span class="post-view-count">阅读(37)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9572098" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>
            <div class="postSeparator"></div>
        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/9572030.html">
    <span>
        工厂模式
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：工厂模式 这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 介绍 意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。 主要解决        <a href="https://www.cnblogs.com/fenghualong/p/9572030.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2018-09-01 22:57
封fenghl
<span class="post-view-count">阅读(77)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9572030" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>


		


<div class="day">
    <div class="dayTitle">
        <a href="https://www.cnblogs.com/fenghualong/archive/2018/08/31.html">2018年8月31日</a>
    </div>

        <div class="postTitle">
            

<a class="postTitle2 vertical-middle" href="https://www.cnblogs.com/fenghualong/p/9563331.html">
    <span>
        单链表的知识点
    </span>
    


</a>

        </div>
        <div class="postCon">

    <div class="c_b_p_desc">
摘要：看完剑指offer和编程之美，将单链表的知识点总结如下： 单链表所能遇到的知识： 所能组成的问题： 说明：链表的结构体为： 1 typedef struct ListNode_{ 2 int val; 3 struct ListNode_ *next; 4 }ListNode; 第一种：从无头单链表        <a href="https://www.cnblogs.com/fenghualong/p/9563331.html" class="c_b_p_desc_readmore">阅读全文</a>
    </div>
</div>
        <div class="clear"></div>
        <div class="postDesc">posted @ 2018-08-31 18:25
封fenghl
<span class="post-view-count">阅读(643)</span><text> </text>
<span class="post-comment-count">评论(0)</span><text> </text>
<span class="post-digg-count">推荐(0)</span><text> </text>
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9563331" rel="nofollow">
    编辑
</a>
</div>
        <div class="clear"></div>

</div>



<div class="topicListFooter">
    <div id="nav_next_page">
        
    <a href="https://www.cnblogs.com/fenghualong/default.html?page=2">
        下一页
    </a>

    </div>    
</div>







	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 封fenghl
<br /><span id="poweredby">Powered by .NET 5.0.0-rc.2.20475.5 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>
